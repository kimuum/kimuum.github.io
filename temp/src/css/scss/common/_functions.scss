@function common-z-index($key) {
  @if map-has-key($z-indexes, $key) {
    @return map-get($z-indexes, $key);
  }
  @warn "Unknown `#{$key}` in $z-indexes.";
}

// basic color set
@function get-color-key($map, $keys...) {
  @each $key in $keys {
    @if map-has-key($map, $key) {
      $map: map-get($map, $key);
    } @else {
      @return null;
    }
  }
  @return $map;
}

@function px-to-rem($size) {
  @if not unitless($size) {
    @return $size / ($size * 0 + 1) * 0.1rem;
  } @else {
    @return $size * 0.1rem;
  }
}

@function px-to-vw($size) {
  $defaultMobileWidth: 360;
  @if not unitless($size) {
    $unitless-size: ($size / ($size * 0 + 1));
    $convert-vw: ($unitless-size / (360 / 100));
    @return $convert-vw + vw;
  } @else {
    @return ($size / (360 / 100)) + vw;
  }
}

// Safe Area (slice dircetion value)
// - $boolean: true/false (value / direction)
@function separateVal($val, $boolean) {
  $val: nth($val, 1);
  $returnVal: 0;
  $returnStringVal: 0;
  $stringIdx: 0;
  @for $i from 1 through length($val) {
    @if (type-of(nth($val, $i)) != string and $i == 1) {
      $returnVal: nth($val, $i);
    } @else if(type-of(nth($val, $i)) !=string and $i != 1) {
      $returnVal: join($returnVal, nth($val, $i));
    } @else if(type-of(nth($val, $i)) == string and $stringIdx == 0) {
      $stringIdx: $i;
      $returnStringVal: nth($val, $i);
    } @else {
      $returnStringVal: join($returnStringVal, nth($val, $i));
    }
  }

  @if ($boolean == true) {
    @return $returnVal;
  } @else {
    @return $returnStringVal;
  }
}

@function dirFlag($receiveDirFlag, $receiveDir) {
  @if ($receiveDirFlag != length($receiveDir)) {
    @return $receiveDirFlag + 1;
  }

  @return $receiveDirFlag;
}

@function safeAresLoop($all, $set, $attr, $val) {
  $dir: top, right, bottom, left;
  $receiveDir: separateVal($val, false);
  $receiveDirFlag: 1;
  $realVal: separateVal($val, true);
  $returnVal: '';
  $safeArea: '';

  // value 축약형 변환
  @if (length($realVal) ==1) {
    $realVal: $realVal $realVal $realVal $realVal;
  } @else if(length($realVal) ==2) {
    $realVal: nth($realVal, 1)
      nth($realVal, 2)
      nth($realVal, 1)
      nth($realVal, 2);
  } @else if(length($realVal) ==3) {
    $realVal: nth($realVal, 1)
      nth($realVal, 2)
      nth($realVal, 3)
      nth($realVal, 2);
  } @else if(length($realVal) ==4) {
    $realVal: $realVal;
  } @else {
    @error 'safeAresLoop length of $val error';
  }

  @for $i from 1 through 4 {
    // check $set (env or constant)
    @if ($set==env) {
      $safeArea: env(safe-area-inset-#{nth($dir, $i)});
    } @else if($set==constant) {
      $safeArea: constant(safe-area-inset-#{nth($dir, $i)});
    } @else {
      @error 'safeAresLoop $set error';
    }

    // returnVal 초기 값
    @if ($i == 1) {
      @if (
        (nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) ==
          true and
          nth($realVal, $i) ==
          0
      ) {
        $returnVal: $safeArea;
        $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
      } @else if(
        (nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) ==
          true and
          nth($realVal, $i) !=
          0
      )
      {
        $returnVal: calc(#{nth($realVal, $i)} + #{$safeArea});
        $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
      } @else {
        $returnVal: nth($realVal, $i);
      }
    } @else {
      // multi safe-area
      @if ($receiveDir != 0 and $all == true) {
        @if (
          (nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) ==
            true and
            nth($realVal, $i) ==
            0
        ) {
          $returnVal: join($returnVal, $safeArea);
          $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
        } @else if(
          (nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) ==
            true and
            nth($realVal, $i) !=
            0
        )
        {
          $returnVal: join(
            $returnVal,
            calc(#{nth($realVal, $i)} + #{$safeArea})
          );
          $receiveDirFlag: dirFlag($receiveDirFlag, $receiveDir);
        } @else {
          $returnVal: join($returnVal, nth($realVal, $i));
        }
      } @else if($receiveDir != 0 and $all == false) {
        // single safe-area
        @if ((nth($dir, $i) == nth($receiveDir, $receiveDirFlag)) == true) {
          @if (nth($realVal, $i) == 0) {
            $returnVal: $safeArea;
          } @else {
            $returnVal: calc(#{nth($realVal, $i)} + #{$safeArea});
          }
        }
      } @else {
        // no direction of safe-area
        $returnVal: nth($realVal, $i);
        @warn 'please set direction of safe-area';
        @return $returnVal;
      }
    }
  }
  @return $returnVal;
}
